@page "/interactiveautomode"
@rendermode InteractiveAuto

@attribute [Authorize]

<h3>This component is rendered with <b>interactive auto (server & client-side) rendering</b></h3>

<button class="btn btn-primary" @onclick="CallLocalAPIAsync">Call local API</button>
<button class="btn btn-primary" @onclick="CallRemoteAPIAsync">Call remote API</button>
<button class="btn btn-primary" @onclick="loadUser">Load User</button>

@if (bands == null)
{
    <p><em>No results from API calls yet...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var band in bands)
            {
                <tr>
                    <td>@band.Id</td>
                    <td>@band.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

<p>@_authMessage</p>

@code {
    [Inject] private AuthenticationStateProvider _authenticationStateProvider { get; set; } = default!;
    [Inject] private IApiService _apiService { get; set; } = default!;
    private List<Band>? bands;
    private string? _authMessage;

    private async Task CallLocalAPIAsync()
    {
        bands = (await _apiService.CallLocalApiAsync()).ToList();
    }

    private async Task CallRemoteAPIAsync()
    {
        bands = (await _apiService.CallRemoteApiAsync()).ToList();
    }

    private async Task loadUser()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            _authMessage = $"Hello, {user.Identity.Name}!";
        }
        else
        {
            _authMessage = "You are not authenticated.";
        }
    }
}
